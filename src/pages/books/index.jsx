import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import { gql, useMutation, useQuery, useSubscription } from "@apollo/client";
import Modal from "@/components/Modal";
import React from "react";
// import { client } from "@/context/ApolloWrapper";
const inter = Inter({ subsets: ["latin"] });
const GET_BOOKS = gql`
  query getBooks {
    books {
      _id
      author
      title
    }
  }
`;

const ADD_BOOK = gql`
  mutation addBook($newBook: InputBook!) {
    addBook(newBook: $newBook) {
      _id
      title
      author
    }
  }
`;
const DEL_BOOK = gql`
  mutation deleteBook($_id: ID!) {
    deleteBook(_id: $_id)
  }
`;

const SUBS_ADD_BOOK = gql`
  subscription Subscription {
    bookAdded {
      author
      _id
      title
    }
  }
`;
export default function Book() {
  const [open, setOpen] = React.useState(false);
  const [delId, setDelId] = React.useState(null);
  const [inputErrs, setInputErrs] = React.useState(null);
  let { data } = useQuery(GET_BOOKS);
  let { data: subData, loading: load, error } = useSubscription(SUBS_ADD_BOOK);
  console.log(subData, "subData", load, error);
  const [mutationFunc, { loading }] = useMutation(ADD_BOOK, {
    update(cache, { data: { addBook } }) {
      cache.modify({
        fields: {
          books(existingBooks = []) {
            const newTodoRef = cache.writeFragment({
              data: addBook,
              fragment: gql`
                fragment A on B {
                  title
                  author
                }
              `,
            });
            return [newTodoRef, ...existingBooks];
          },
        },
      });
    },
    onCompleted: () => {
      closeHandler();
    },
    onError: (e) => {
      let errors = {};
      if (e.graphQLErrors?.length) {
        errors = e.graphQLErrors[e.graphQLErrors.length - 1];
      }
      setInputErrs(errors);
    },
  });
  const [mutationDel, { loading: processing, data: delSuccess }] = useMutation(
    DEL_BOOK,
    {
      update(cache) {
        //  * 1st Way
        console.log(delId, "delid");
        const normalizedId = cache.identify({ _id: delId, __typename: "Book" });
        cache.evict({ _id: normalizedId });
        cache.gc();
        /**
       * 2nd Way
       * 
       * cache.modify({
        fields: {
          books(existingTaskRefs, { readField }) {
            return existingTaskRefs.filter(
              (taskRef) => delId !== readField("id", taskRef)
            );
          },
        },
      });
       */
        // cache.modify({
        //   fields: {
        //     books(existingBooks = []) {
        //       // const newTodoRef = cache.writeFragment({
        //       //   data: deleteBook,
        //       //   fragment: gql`
        //       //     fragment A on B {
        //       //       title
        //       //       author
        //       //     }
        //       //   `,
        //       // });
        //       console.log(existingBooks);
        //       return existingBooks.filter(
        //         (item) => item.__ref !== `Book:${delId}`
        //       );
        //     },
        //   },
        // });
      },
      onCompleted: () => {
        // closeHandler();
      },
      onError: (e) => {
        let errors = {};
        if (e.graphQLErrors?.length) {
          errors = e.graphQLErrors[e.graphQLErrors.length - 1];
        }
        setInputErrs(errors);
      },
    }
  );
  // React.useEffect(() => {
  //   if (delSuccess?.deleteBook && delId) {
  //     // data.books = data.books.filter((item) => item.id != delId);
  //     setDelId(null);
  //   }
  // }, [delSuccess?.deleteBook]);
  console.log(inputErrs, "delid=>", delId);
  const onSubmit = (e) => {
    e.preventDefault();
    const myFormData = new FormData(e.target);
    const newBook = {};
    myFormData.forEach((value, key) => (newBook[key] = value));
    mutationFunc({ variables: { newBook } });
  };
  const closeHandler = () => setOpen((p) => !p);
  return (
    <>
      <Head>
        <title>Books</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          <button disabled={loading} onClick={closeHandler}>
            Add{loading ? "ing..." : " New Book"}
          </button>
          {open && (
            <Modal {...{ open, closeHandler }}>
              <h3>New Book</h3>
              <div style={{ width: "100%" }}>
                <form
                  onSubmit={onSubmit}
                  style={{
                    width: "100%",
                    display: "flex",
                    flexWrap: "wrap",
                    //   flexDirection: "row",
                    flexGrow: 1,
                    gap: "20px",
                    margin: "auto",
                  }}
                >
                  <input
                    required
                    style={{
                      flexBasis: "200px",
                      maxWidth: "100%",
                      // marginBottom: "15px",
                      minHeight: "40px",
                    }}
                    //   onChange={changeHandler}
                    type="text"
                    name="title"
                    placeholder="Title"
                  />

                  <input
                    required
                    style={{
                      flexBasis: "200px",
                      maxWidth: "100%",
                      // marginBottom: "15px",
                      minHeight: "40px",
                    }}
                    //   onChange={changeHandler}
                    type="text"
                    name="author"
                    placeholder="Author"
                  />

                  <button
                    type="submit"
                    style={{ height: "40px", flexBasis: "200px" }}
                  >
                    Submit
                  </button>
                </form>
              </div>
            </Modal>
          )}
          <h2>Books</h2>
          <div>
            {[...(data?.books || [])].map((book, i) => {
              return (
                <div key={i} style={{ display: "flex" }}>
                  <p>{book._id}</p>
                  {`=>`}
                  <p>{book.title}</p>
                  {`=>`}
                  <p>{book.author}</p>
                  <p
                    onClick={() => {
                      setDelId(book._id);
                      mutationDel({ variables: { _id: book._id } });
                    }}
                    style={{ color: "red" }}
                  >
                    DEL
                  </p>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}
// export async function getStaticProps() {

//   const {
//     data: { books },
//   } = await client.query({
//     query: GET_BOOKS,
//   });

//   return {
//     props: {
//       books,
//     },
//   };
// }
